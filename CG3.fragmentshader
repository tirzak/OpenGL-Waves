#version 400
out vec4 FragColor;

in vec3 Normal_gs;  
in vec3 FragPos_gs;  
in vec3 lightDir_gs;
in vec3 eyePos_gs;
in vec2 uv_gs;
in vec3 triDistance;


uniform float time_vs;
uniform sampler2D waterTexture;
uniform sampler2D displacementTexture;

void phong(out vec4 fragcolor)
{
       // You probably want to put them as uniforms
    vec4 LightColor = vec4(1,1,1,1);
     float dispStrength = 0.01;
    vec2 uv = uv_gs;
    vec2 dispuv = uv_gs;
    vec2 disp = texture(displacementTexture, dispuv).xy - vec2(0.5, 0.5);
    uv = uv_gs + dispStrength*disp;
    
   
    
    vec4 MaterialDiffuseColor = texture(waterTexture, uv_gs);
    vec4 MaterialAmbientColor = vec4(0.2,0.2,0.2,1.0) * MaterialDiffuseColor;
    vec4 MaterialSpecularColor = vec4(0.8, 0.8, 0.8,1.0);

    vec3 n = normalize( Normal_gs );

    vec3 l = normalize( lightDir_gs );

    float cosTheta = clamp( dot( n,l ), 0,1 );

    vec3 E = normalize(eyePos_gs);
    vec3 R = reflect(-l,n);
    float cosAlpha = clamp( dot( E,R ), 0,1 );

    fragcolor =
        // Ambient : simulates indirect lighting
        MaterialAmbientColor +
        // Diffuse : "color" of the object
        MaterialDiffuseColor * LightColor * cosTheta +
        // Specular : reflective highlight, like a mirror
        MaterialSpecularColor * LightColor * pow(cosAlpha,64);

}

void main(){
    vec4 phongColor;
    phong(phongColor);
    FragColor =phongColor;
}
